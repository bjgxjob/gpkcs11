#
# This file is part of GPKCS11. 
# (c) 1999-2001 TC TrustCenter GmbH 
#
# GPKCS11 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#  
# GPKCS11 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#  
# You should have received a copy of the GNU General Public License
# along with GPKCS11; see the file COPYING.  If not, write to the Free
# Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111, USA.  
# 
# RCSID:       $Id$
# Source:      $Source$
# Last Delta:  $Date$ $Revision$ $Author$
# State:       $State$ $Locker$
# NAME:        C_SetPin.exp
# SYNOPSIS:    -
# DESCRIPTION: run test to check proper setting of pins
# FILES:       -
# SEE/ALSO:    -
# AUTHOR:      lbe
# BUGS:        -
#

set timeout 3
#
# expectations that clean up in case of error. Note that `$test' is
# a purely local variable.
#
# The first of these is used to match any bad responses, and resynchronise
# things by finding a prompt. The second is a timeout error, and shouldn't
# ever be triggered.
#
expect_after {
    -re "\[^\n\r\]*$prompt$" {
	fail "$test (bad match)"
	if { $verbose > 0 } {
	    regexp ".*\r\n(\[^\r\n\]+)(\[\r\n\])+$prompt$" \
		    $expect_out(buffer) "" output
	    send_user "\tUnmatched output: \"$output\"\n"
	}
    }
    timeout {
	fail "$test (timeout)"
    }
}

#
# Here are the tests
#
set inited 0

# Test the setting of Pins on all token of a library.
# Slots that do not have token are not touched.

#
# TODO: write a TK dialog to query the particular pins
#
set test set_pin

spawn gpkcs11.base/C_SetPin -i abcdef 1234 12345678 1234567
# look for the invalid PIN
set no_login_reqd 0
set token_num 0
set invalid_pin_set 0
expect {
    -re "starting with token" {
	# test wether the last token worked correctly : 
	# invalid pin should have been set if the token accepts PINs at all
	if { $token_num > 0 } {
	    if { ($no_login_reqd == 0) && (invalid_pin_set == 0) } {
		fail "$test: token $token_num requires Login, but invalid Pin not considered invalid"   
	    }
	}
        set no_login_reqd 0
        set invalid_pin_set 0
	incr token_num
        exp_continue
    }
    
    -re "does not require a Login" {
	# if this found at least once, ending without further ado is not really an error.
	incr no_login_reqd
	exp_continue
    }

    -re "C_SetPIN for invalid PIN" {
        incr invalid_pin_set
    } 

    -re "could not get function pointer list" { fail "$test: OUT: $expect_out(buffer)" }

    -re "could not get function pointer list" { fail "$test: " }

    eof { 
	# test wether these token require login at all
	if {$no_login_reqd > 0 } {
	    pass "$test: no token requires login"   
        } else {
	    if {$invalid_pin_set == 0} {
		fail "$test: setting invalid PIN does not fail"
	    }
	    pass "$test: OUT: $expect_out(buffer)"
        }
    }
}


#
# empty test
#
#set test 
#send "(C-)\n"
#expect {
#	-re ".*$prompt$"		{ pass "$test" }
#}
    
