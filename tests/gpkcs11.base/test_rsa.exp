# -*- tcl -*-
#
# This file is part of GPKCS11. 
# (c) 1999-2001 TC TrustCenter GmbH 
#
# GPKCS11 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#  
# GPKCS11 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#  
# You should have received a copy of the GNU General Public License
# along with GPKCS11; see the file COPYING.  If not, write to the Free
# Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111, USA.  
# 
# RCSID:       $Id$
# Source:      $Source$
# Last Delta:  $Date$ $Revision$ $Author$
# State:       $State$ $Locker$
# NAME:        test_rsa.exp
# SYNOPSIS:    -
# DESCRIPTION: run the test for RSA key generation
# FILES:       -
# SEE/ALSO:    -
# AUTHOR:      lbe
# BUGS:        -
#
#
# expectations that clean up in case of error. Note that `$test' is
# a purely local variable.
#
# The first of these is used to match any bad responses, and resynchronise
# things by finding a prompt. The second is a timeout error, and shouldn't
# ever be triggered.
#
#expect_after {
#    -re "\[^\n\r\]*$prompt$" {
#	fail "$test (bad match)"
#	if { $verbose > 0 } {
#	    regexp ".*\r\n(\[^\r\n\]+)(\[\r\n\])+$prompt$" \
#		    $expect_out(buffer) "" output
#	    send_user "\tUnmatched output: \"$output\"\n"
#	}
#    }
#}


# creating an RSA key may take a while
set timeout 120

# Test the generation of Key Pairs on the tokens
# Slots that do not have token are not touched and neither
# are token that do not support CKM_RSA_PKCS_GENERATE_KEY_PAIR.

set test rsa_key_gen

spawn gpkcs11.base/test_rsa

expect {

    -re "could not get function pointer list" { 
	fail "$test OUT: $expect_out(buffer)" 
        exp_continue
    }

    -re "FAIL" { 
	fail "$test: OUT: $expect_out(buffer)" 
        exp_continue
    }
    
    timeout {
	fail "$test (timeout)"
        exp_continue
    }
    eof { 
	pass "$test: Program ended"
    }
}


#
# empty test
#
#set test 
#send "(C-)\n"
#expect {
#	-re ".*$prompt$"		{ pass "$test" }
#}
    
